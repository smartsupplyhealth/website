const cron = require('node-cron');
const ClientInventory = require('../models/ClientInventory');
const Product = require('../models/Product');
const Client = require('../models/Client');
const Order = require('../models/Order');
// Services d'auto-commande et email g√©r√©s par n8n
// const autoOrderService = require('../services/autoOrderService');
// const emailService = require('../utils/emailService');

let cronJob = null;

// Fonction principale de consommation quotidienne
async function runAutoConsumptionCron() {
    try {
        console.log('üîÑ D√©but de la consommation quotidienne...');

        // R√©cup√©rer tous les inventaires clients
        const inventories = await ClientInventory.find({});
        console.log(`üìä ${inventories.length} inventaires trouv√©s`);

        for (const inv of inventories) {
            try {
                // V√©rifier si le produit existe
                const product = await Product.findById(inv.product);
                if (!product) {
                    console.log(`‚ùå Produit ${inv.product} non trouv√© pour l'inventaire ${inv._id}`);
                    continue;
                }

                // V√©rifier si le client existe
                const client = await Client.findById(inv.client);
                if (!client) {
                    console.log(`‚ùå Client ${client} non trouv√© pour l'inventaire ${inv._id}`);
                    continue;
                }

                // Calculer la consommation quotidienne
                const dailyConsumption = product.dailyConsumption || 0;
                const newStock = Math.max(0, inv.currentStock - dailyConsumption);

                console.log(`üì¶ ${product.name}: ${inv.currentStock} ‚Üí ${newStock} (consommation: ${dailyConsumption})`);

                // Mettre √† jour le stock
                inv.currentStock = newStock;
                await inv.save();

                // Logique d'auto-commande et email g√©r√©e par n8n
                // Cette fonction ne fait que la d√©cr√©mentation de stock

            } catch (error) {
                console.error(`‚ùå Erreur traitement inventaire ${inv._id}:`, error.message);
            }
        }

        console.log('‚úÖ Consommation quotidienne termin√©e');

    } catch (error) {
        console.error('‚ùå Erreur consommation quotidienne:', error.message);
    }
}

// Fonction de planification du cron (D√âSACTIV√âE)
function scheduleDailyConsumption() {
    // CRON JOB D√âSACTIV√â - REMPLAC√â PAR N8N
    console.log('‚è∏Ô∏è Cron job d√©sactiv√© - Remplac√© par n8n workflow');
    return;

    // Code du cron job comment√© pour √©viter les erreurs de syntaxe
    // if (cronJob) {
    //   console.log('‚è∏Ô∏è Cron d√©j√† planifi√©, on √©vite la double planification');
    //   return; // √©vite la double planif
    // }
    // const cronSchedule = '*/5 * * * *'; // chaque 5 minutes
    // console.log('üïê Cron activ√©: ' + cronSchedule + ' (Africa/Tunis)');
    // cronJob = cron.schedule(
    //   cronSchedule,
    //   async () => {
    //     await runAutoConsumptionCron();
    //   },
    //   { timezone: 'Africa/Tunis' }
    // );
    // console.log('‚úÖ Cron job d√©marr√© (planification unique)');
}

// Fonction pour arr√™ter le cron
function stopDailyConsumption() {
    if (cronJob) {
        cronJob.destroy();
        cronJob = null;
        console.log('‚èπÔ∏è Cron job arr√™t√©');
    }
}

module.exports = {
    runAutoConsumptionCron,
    scheduleDailyConsumption,
    stopDailyConsumption
};
