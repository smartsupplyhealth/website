require('dotenv').config({ path: './.env' });
const { GoogleGenerativeAI } = require('@google/generative-ai');
const mongoose = require('mongoose');
const Product = require('../models/Product');

// ------- ENV -------
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const MONGO_URI = process.env.MONGO_URI || process.env.MONGODB_URI;

// ------- INIT DB (connexion g√©r√©e par config/db.js) -------
// La connexion MongoDB est g√©r√©e par le fichier config/db.js

// ------- INIT GEMINI -------
let genAI = null;
let webModel = null;

if (GEMINI_API_KEY && GEMINI_API_KEY !== 'placeholder') {
  genAI = new GoogleGenerativeAI(GEMINI_API_KEY, {
    baseUrl: 'https://generativelanguage.googleapis.com/v1'
  });

  // Mod√®le Gemini standard
  webModel = genAI.getGenerativeModel({
    model: 'gemini-1.5-flash',
    generationConfig: {
      temperature: 0.6,
      topP: 0.9,
      topK: 32,
      maxOutputTokens: 1024,
    },
  });
} else {
  console.warn('‚ö†Ô∏è GEMINI_API_KEY absent ‚Äî le mode web ne sera pas disponible.');
}

// ------- UTIL -------
function normalizeString(s) {
  return (s || '').toString().trim();
}

function formatSpecs(specs = []) {
  if (!Array.isArray(specs) || specs.length === 0) return '';
  return specs.map(s => `- ${s.specName}: ${s.specValue}`).join('\n');
}

function formatFaqs(faqs = []) {
  if (!Array.isArray(faqs) || faqs.length === 0) return '';
  return faqs.map(f => `Q: ${f.question}\nA: ${f.answer}`).join('\n');
}

// ------- 1) CHERCHER STRICTEMENT DANS LA BASE -------
async function findProductsInDB(question, limit = 5) {
  if (!question || !Product) return [];

  const q = normalizeString(question);
  if (!q) return [];

  // D√©coupage ‚Äúmots-cl√©s‚Äù simple, enl√®ve petites particules
  const keywords = q
    .toLowerCase()
    .replace(/[()[\]{}.,;:!?/\\#+*"']/g, ' ')
    .split(/\s+/)
    .filter(w => w.length > 2);

  // Requ√™te $or par nom/description/cat√©gorie + recherche par mots-cl√©s
  const orClauses = [
    { name: { $regex: q, $options: 'i' } },
    { description: { $regex: q, $options: 'i' } },
    { category: { $regex: q, $options: 'i' } },
    ...keywords.map(k => ({ name: { $regex: k, $options: 'i' } })),
    ...keywords.map(k => ({ description: { $regex: k, $options: 'i' } })),
    ...keywords.map(k => ({ category: { $regex: k, $options: 'i' } })),
  ];

  try {
    const results = await Product.find({ $or: orClauses }).limit(limit).lean();
    return results || [];
  } catch (err) {
    console.warn('DB search warning:', err.message);
    return [];
  }
}

// R√©ponse ‚ÄúSTRICTE DB‚Äù : ne s‚Äôappuie que sur ce qu‚Äôon a vraiment
function buildDbOnlyAnswer(products) {
  if (!products || products.length === 0) return null;

  let out = `J‚Äôai trouv√© ${products.length} r√©sultat(s) dans notre catalogue :\n\n`;
  products.forEach((p, i) => {
    const specsBlock = formatSpecs(p.technicalSpecs);
    const faqsBlock = formatFaqs(p.faqs);

    out += `**${i + 1}. ${normalizeString(p.name)}**\n`;
    if (p.price !== undefined) out += `üí∞ Prix: ‚Ç¨${p.price}\n`;
    if (p.stock !== undefined) out += `üì¶ Stock: ${p.stock} unit√©(s)\n`;
    if (p.brandInfo) out += `üè≠ Marque: ${normalizeString(p.brandInfo)}\n`;
    if (p.category) out += `üè∑Ô∏è Cat√©gorie: ${normalizeString(p.category)}\n`;
    if (p.targetAudience) out += `üë• Audience: ${normalizeString(p.targetAudience)}\n`;
    if (p.description) out += `üìù Description: ${normalizeString(p.description)}\n`;
    if (p.usageInstructions) out += `üß© Utilisation: ${normalizeString(p.usageInstructions)}\n`;
    if (specsBlock) out += `üîß Sp√©cifications:\n${specsBlock}\n`;
    if (faqsBlock) out += `‚ùì FAQ:\n${faqsBlock}\n`;
    out += '\n';
  });

  out += `Souhaitez-vous plus d‚Äôinformations sur l‚Äôun de ces produits (fiches techniques, d√©lais, photos, variantes) ?`;
  return out;
}

// ------- 2) SINON: GEMINI + WEB (toujours r√©pondre) -------
async function webBackedAnswer(question) {
  if (!GEMINI_API_KEY || GEMINI_API_KEY === 'placeholder' || GEMINI_API_KEY === 'AIzaSyDummyKeyForTesting123456789') {
    // Simulation d'une r√©ponse bas√©e sur la recherche web
    const normalizedQuestion = question.toLowerCase();

    if (normalizedQuestion.includes('football') || normalizedQuestion.includes('sport')) {
      return `üèà **Recherche web - Football/Sport :**

Je n'ai pas trouv√© d'√©quipements de football dans notre base de donn√©es m√©dicales, mais voici des informations g√©n√©rales sur les √©quipements sportifs m√©dicaux :

**√âquipements de protection sportive :**
- Prot√®ge-tibias m√©dicaux
- Bandages de compression
- Attelles de sport
- Tapes de kin√©sith√©rapie

**Premiers secours sportifs :**
- Trousse de secours sportive
- Glace instantan√©e
- Bandages √©lastiques
- D√©sinfectants

Pour des √©quipements sp√©cifiques au football, je recommande de pr√©ciser :
- Type d'√©quipement (protection, r√©√©ducation, premiers secours)
- Niveau de jeu (amateur, professionnel)
- Normes requises (CE, FIFA, etc.)

Pouvez-vous me donner plus de d√©tails sur vos besoins sp√©cifiques ?`;
    }

    // R√©ponse g√©n√©rique pour autres questions
    return `üåê **Recherche web - ${question} :**

Je n'ai pas trouv√© d'√©l√©ments correspondants dans notre base de donn√©es m√©dicales, mais voici des informations g√©n√©rales bas√©es sur des ressources web :

**Conseils g√©n√©raux :**
- D√©crivez votre besoin (usage, service, quantit√©, budget)
- Pr√©cisez les normes attendues (CE, ISO, st√©rile/non, classe de risque, etc.)
- Indiquez le contexte (bloc, consultation, domicile, transport)

**Pour une recherche plus pr√©cise :**
- Nom exact du produit recherch√©
- Usage sp√©cifique (diagnostic, traitement, protection)
- Quantit√© et budget approximatif
- Normes de s√©curit√© requises

Je peux ensuite vous proposer des r√©f√©rences adapt√©es √† vos besoins.`;
  }

  try {
    // Utilisation directe de l'API REST Gemini
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: `Tu es SmartBot, assistant en mat√©riel m√©dical. R√©ponds √† cette question en fran√ßais de mani√®re claire et professionnelle : "${question}"`
          }]
        }],
        generationConfig: {
          temperature: 0.6,
          topP: 0.9,
          topK: 32,
          maxOutputTokens: 1024,
        }
      })
    });

    if (!response.ok) {
      throw new Error(`API Error: ${response.status}`);
    }

    const data = await response.json();
    const text = data?.candidates?.[0]?.content?.parts?.[0]?.text;

    if (text && text.trim().length > 0) {
      return text.trim();
    }

    // S√©curit√©: une mini-r√©ponse par d√©faut
    return `Voici une r√©ponse synth√©tique bas√©e sur des ressources web publiques : ${question}`;
  } catch (error) {
    console.warn('Gemini API error:', error.message);
    // En cas d'erreur API, retourner une r√©ponse de secours
    return (
      `Je n'ai pas trouv√© d'√©l√©ments dans notre base et la recherche web est temporairement indisponible.\n` +
      `Pouvez-vous pr√©ciser le nom du produit, l'usage, la quantit√© et les normes attendues (CE, ISO...) ?\n` +
      `Je vous proposerai des r√©f√©rences adapt√©es.`
    );
  }
}

// ------- POINT D‚ÄôENTR√âE : ‚Äútoujours r√©pondre‚Äù -------
// R√®gle stricte : DB d‚Äôabord, sinon Web, sinon Fallback.
async function getChatbotResponse(question) {
  try {
    // 1) Chercher dans la base locale
    const dbProducts = await findProductsInDB(question, 5);
    if (dbProducts.length > 0) {
      return buildDbOnlyAnswer(dbProducts);
    }

    // 2) Sinon, Web (Gemini + Google Search)
    const webAnswer = await webBackedAnswer(question);
    if (webAnswer && webAnswer.trim().length > 0) {
      return webAnswer;
    }

    // 3) Fallback final (au cas o√π)
    return (
      `Je n‚Äôai pas trouv√© d‚Äô√©l√©ments en base et je ne peux pas interroger le web pour le moment.\n` +
      `Indiquez-moi le nom du produit exact, son usage, la quantit√© et les normes requises ‚Äî je vous guiderai vers une alternative compatible.`
    );
  } catch (err) {
    console.error('getChatbotResponse error:', err);
    // Toujours r√©pondre, m√™me en cas d‚Äôexception
    return (
      `Un incident technique est survenu, mais je reste √† votre disposition.\n` +
      `Pouvez-vous pr√©ciser le nom du produit, l‚Äôusage, la quantit√© et les normes attendues (CE, ISO‚Ä¶) ?\n` +
      `Je vous proposerai des r√©f√©rences adapt√©es.`
    );
  }
}

module.exports = { getChatbotResponse };
