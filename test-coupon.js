const axios = require('axios');

// Test script pour v√©rifier le syst√®me de coupon
async function testCouponSystem() {
    console.log('üß™ Test du syst√®me de coupon...\n');

    try {
        // Test 1: Validation d'un coupon valide
        console.log('1Ô∏è‚É£ Test avec coupon SAVE10...');
        const response1 = await axios.post('http://localhost:5000/api/coupons/validate', {
            code: 'SAVE10',
            orderAmount: 63.34,
            productIds: []
        });

        console.log('‚úÖ R√©ponse API:', {
            success: response1.data.success,
            discountAmount: response1.data.discountAmount,
            finalAmount: response1.data.finalAmount,
            coupon: response1.data.coupon?.code
        });

        // Test 2: Validation d'un coupon invalide
        console.log('\n2Ô∏è‚É£ Test avec coupon invalide...');
        try {
            const response2 = await axios.post('http://localhost:5000/api/coupons/validate', {
                code: 'INVALID',
                orderAmount: 63.34,
                productIds: []
            });
            console.log('‚ùå Coupon invalide accept√©:', response2.data);
        } catch (error) {
            console.log('‚úÖ Coupon invalide correctement rejet√©:', error.response?.data?.message);
        }

        // Test 3: Test avec montant trop faible
        console.log('\n3Ô∏è‚É£ Test avec montant trop faible...');
        try {
            const response3 = await axios.post('http://localhost:5000/api/coupons/validate', {
                code: 'SAVE10',
                orderAmount: 30, // Trop faible pour SAVE10 (min 50)
                productIds: []
            });
            console.log('‚ùå Montant trop faible accept√©:', response3.data);
        } catch (error) {
            console.log('‚úÖ Montant trop faible correctement rejet√©:', error.response?.data?.message);
        }

        // Test 4: Test de parsing des donn√©es
        console.log('\n4Ô∏è‚É£ Test de parsing des donn√©es...');
        const discount = parseFloat(response1.data.discountAmount);
        const final = parseFloat(response1.data.finalAmount);
        const originalAmount = 63.34;

        console.log('üìä Donn√©es pars√©es:', {
            discount,
            final,
            originalAmount,
            isValidDiscount: !isNaN(discount) && discount >= 0,
            isValidFinal: !isNaN(final) && final > 0,
            discountType: typeof response1.data.discountAmount,
            finalType: typeof response1.data.finalAmount
        });

        // Test 5: Validation des calculs
        console.log('\n5Ô∏è‚É£ Test des calculs...');
        const expectedFinal = originalAmount - discount;
        console.log('üßÆ Calculs:', {
            originalAmount,
            discount,
            expectedFinal,
            actualFinal: final,
            calculationCorrect: Math.abs(expectedFinal - final) < 0.01
        });

    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error.message);
        if (error.response) {
            console.error('üìÑ R√©ponse d\'erreur:', error.response.data);
        }
    }
}

// Ex√©cuter le test
testCouponSystem();

