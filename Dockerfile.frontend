# Dockerfile pour le frontend React
FROM node:18-alpine as build

# Définir le répertoire de travail
WORKDIR /app

# Copier les fichiers package.json
COPY frontend/package*.json ./

# Installer les dépendances
RUN npm ci --silent

# Copier le code source du frontend
COPY frontend/ .

# Build de l'application React
RUN npm run build

# Stage de production avec Nginx
FROM nginx:alpine

# Installer curl pour le health check
RUN apk add --no-cache curl

# Copier les fichiers buildés depuis le stage précédent
COPY --from=build /app/build /usr/share/nginx/html

# Copier la configuration Nginx personnalisée
COPY nginx-frontend.conf /etc/nginx/conf.d/default.conf

# Créer un utilisateur non-root
RUN addgroup -g 1001 -S nginx
RUN adduser -S nginx -u 1001

# Donner les permissions appropriées
RUN chown -R nginx:nginx /usr/share/nginx/html
RUN chown -R nginx:nginx /var/cache/nginx
RUN chown -R nginx:nginx /var/log/nginx
RUN chown -R nginx:nginx /etc/nginx/conf.d
RUN touch /var/run/nginx.pid
RUN chown -R nginx:nginx /var/run/nginx.pid

# Changer vers l'utilisateur non-root
USER nginx

# Exposer le port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000 || exit 1

# Commande de démarrage
CMD ["nginx", "-g", "daemon off;"]