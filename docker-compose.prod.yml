version: '3.8'

services:
  # Base de donn√©es MongoDB - Production
  mongodb:
    image: mongo:6.0
    container_name: smartsupply-mongodb-prod
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: smartsupply
    ports:
      - "27017:27017"
    volumes:
      - mongodb_prod_data:/data/db
      - ./backend/scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - ./backups:/backups
    networks:
      - smartsupply-prod-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Backend API - Production
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smartsupply-backend-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/smartsupply?authSource=admin
      JWT_SECRET: ${JWT_SECRET}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      REDIS_URL: redis://redis:6379
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./backend/uploads:/app/backend/uploads
      - ./logs:/app/logs
    networks:
      - smartsupply-prod-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Frontend React - Production
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: smartsupply-frontend-prod
    restart: always
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL}
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - smartsupply-prod-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Redis pour le cache
  redis:
    image: redis:7-alpine
    container_name: smartsupply-redis-prod
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
    networks:
      - smartsupply-prod-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Reverse Proxy - Production
  nginx:
    image: nginx:alpine
    container_name: smartsupply-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - smartsupply-prod-network
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Monitoring avec Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: smartsupply-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - smartsupply-prod-network

  # Grafana pour les dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: smartsupply-grafana
    restart: always
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - smartsupply-prod-network

volumes:
  mongodb_prod_data:
  redis_prod_data:
  prometheus_data:
  grafana_data:

networks:
  smartsupply-prod-network:
    driver: bridge
